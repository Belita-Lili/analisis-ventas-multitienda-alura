# -*- coding: utf-8 -*-
"""Tiendas_DC_Alura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-RPFgSYGax2rd-Vk-YorPZUrG-UNmQVm

[Página de Alura](https://www.aluracursos.com/)


```
# Esto tiene formato de código
```

### Importación de datos
"""

pip install geopandas

import pandas as pd
import matplotlib.pyplot as plt
import folium
import geopandas as gpd
from shapely.geometry import Point

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_1%20.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_4.csv"

tienda = pd.read_csv(url)
tienda2 = pd.read_csv(url2)
tienda3 = pd.read_csv(url3)
tienda4 = pd.read_csv(url4)

tienda.head()

# Leer el archivo .shp de Colombia (por ejemplo: municipios o departamentos)
colombia = gpd.read_file("gadm41_COL_1.shp")  # Cambia el nombre según tu archivo

# Supongamos que 'tabla' ya tiene las columnas 'lat' y 'lon'
# Convertir a GeoDataFrame con geometría de puntos
tabla_gdf = gpd.GeoDataFrame(
    tienda,
    geometry=gpd.points_from_xy(tienda2['lon'], tienda2['lat']),
    crs="EPSG:4326"  # WGS 84 (lat/lon estándar)
)

# Graficar el mapa base
fig, ax = plt.subplots(figsize=(10, 10))
colombia.plot(ax=ax, cmap='Blues', edgecolor='navy', legend=True)

# Graficar los puntos de tienda en rojo
tabla_gdf.plot(ax=ax, color='red', markersize=60)

# Título y estilo
plt.title("Ubicación de Tiendas sobre el mapa de Colombia")
plt.xlabel("Longitud")
plt.ylabel("Latitud")
plt.grid(False)
plt.tight_layout()
plt.show()

# @title Categoría del Producto vs Costo de envío

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(tienda['Categoría del Producto'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(tienda, x='Costo de envío', y='Categoría del Producto', inner='box', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

# @title Calificación

from matplotlib import pyplot as plt
tienda['Calificación'].plot(kind='hist', bins=20, title='Calificación')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Categoría del Producto vs Método de pago

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['Método de pago'].value_counts()
    for x_label, grp in tienda.groupby('Categoría del Producto')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('Categoría del Producto')
_ = plt.ylabel('Método de pago')

# @title Precio

from matplotlib import pyplot as plt
tienda['Precio'].plot(kind='hist', bins=20, title='Precio')
plt.gca().spines[['top', 'right',]].set_visible(False)



"""#1. Análisis de facturación


"""

facturacion = [tienda['Precio'] + tienda['Costo de envío'], tienda2['Precio'] + tienda2['Costo de envío'], tienda3['Precio'] + tienda3['Costo de envío'], tienda4['Precio'] + tienda4['Costo de envío']]

facturacion

# Lista de facturación por tienda (cada elemento es una Serie de valores por fila)
facturacion = [
    tienda['Precio'] + tienda['Costo de envío'],
    tienda2['Precio'] + tienda2['Costo de envío'],
    tienda3['Precio'] + tienda3['Costo de envío'],
    tienda4['Precio'] + tienda4['Costo de envío']
]

# Sumar facturación total de cada tienda
totales = [f.sum() for f in facturacion]
nombres_tiendas = ['Tienda A', 'Tienda B', 'Tienda C', 'Tienda D']

df_facturacion = pd.DataFrame({
    'Tienda': nombres_tiendas,
    'Facturación': totales
})

# Identificar el índice del valor máximo
max_index = df_facturacion['Facturación'].idxmax()

# Asignar colores: el más alto en rojo, los demás en azul
colors = ['red' if i == max_index else 'steelblue' for i in range(len(df_facturacion))]

# Crear gráfico
plt.figure(figsize=(8, 6))
bars = plt.bar(df_facturacion['Tienda'], df_facturacion['Facturación'], color=colors)

# Añadir texto encima de cada barra
for bar in bars:
    yval = bar.get_height()
    plt.text(
        bar.get_x() + bar.get_width() / 2,
        yval,
        f'{yval:,.0f}',
        ha='center',
        va='bottom',
        fontsize=10,
        fontweight='bold' if bar.get_facecolor() == (1.0, 0.0, 0.0, 1.0) else 'normal'  # negrita para el más alto
    )

plt.title("Facturación total por tienda", fontsize=14)
plt.xlabel("Tienda")
plt.ylabel("Facturación ($)")
plt.tight_layout()
plt.show()

"""# 2. Ventas por categoría"""

# Agrupar por categoría y contar la cantidad de ventas (una fila = una venta)
ventas_por_categoria = [tienda['Categoría del Producto'].value_counts(), tienda2['Categoría del Producto'].value_counts(), tienda3['Categoría del Producto'].value_counts(), tienda4['Categoría del Producto'].value_counts()]

print(ventas_por_categoria)

plt.bar(tienda['Categoría del Producto'], tienda['Precio'])

"""# 3. Calificación promedio de la tienda

"""

# Calcular calificación promedio
calificacion_promedio = tienda['Calificación'].mean()

print(f'Calificación promedio de la tienda: {calificacion_promedio:.2f}')

plt.bar(tienda['Calificación'], tienda['Precio'])

"""# 4. Productos más y menos vendidos"""

# Contar ventas por producto
ventas_por_producto = tienda['Producto'].value_counts().reset_index()

# Producto más vendido
producto_mas_vendido = ventas_por_producto.iloc[0]

# Producto menos vendido (último en la lista)
producto_menos_vendido = ventas_por_producto.iloc[-1]

print("Producto más vendido:")
print(producto_mas_vendido)

print("\nProducto menos vendido:")
print(producto_menos_vendido)

# Contar ventas por producto
ventas_por_producto2 = tienda2['Producto'].value_counts().reset_index()

# Producto más vendido
producto_mas_vendido2 = ventas_por_producto2.iloc[0]

# Producto menos vendido (último en la lista)
producto_menos_vendido2 = ventas_por_producto2.iloc[-1]

print("Producto más vendido:")
print(producto_mas_vendido2)

print("\nProducto menos vendido:")
print(producto_menos_vendido2)

# Contar ventas por producto
ventas_por_producto3 = tienda3['Producto'].value_counts().reset_index()

# Producto más vendido
producto_mas_vendido3 = ventas_por_producto3.iloc[0]

# Producto menos vendido (último en la lista)
producto_menos_vendido3 = ventas_por_producto3.iloc[-1]

print("Producto más vendido:")
print(producto_mas_vendido3)

print("\nProducto menos vendido:")
print(producto_menos_vendido3)

# Contar ventas por producto
ventas_por_producto4 = tienda4['Producto'].value_counts().reset_index()

# Producto más vendido
producto_mas_vendido4 = ventas_por_producto4.iloc[0]

# Producto menos vendido (último en la lista)
producto_menos_vendido4 = ventas_por_producto4.iloc[-1]

print("Producto más vendido:")
print(producto_mas_vendido4)

print("\nProducto menos vendido:")
print(producto_menos_vendido4)

tienda[0] = 'Tienda A'
tienda2[0] = 'Tienda B'
tienda3[0] = 'Tienda C'
tienda4[0] = 'Tienda D'

# Combinar todos en uno solo
df_total = pd.concat([tienda, tienda2, tienda3, tienda4], ignore_index=True)

# Ahora puedes hacer un gráfico de precios promedio por producto y tienda
# (si hay productos repetidos en distintas tiendas)
precio_promedio = df_total.groupby(['Producto', 0])['Precio'].mean().reset_index()

# Gráfico de barras agrupado por producto y tienda
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.barplot(data=precio_promedio, x='Producto', y='Precio')
plt.title('Comparación de Precios por Producto y Tienda')
plt.ylabel('Precio ($)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""# 5. Envío promedio por tienda"""

# Calcular envío promedio por tienda
envio_promedio_por_tienda = tienda.groupby('Lugar de Compra')['Costo de envío'].mean().reset_index()

# Redondear si deseas
envio_promedio_por_tienda['Costo de envío'] = envio_promedio_por_tienda['Costo de envío'].round(2)

print(envio_promedio_por_tienda)

plot.bar(envio_promedio_por_tienda['Lugar de Compra'], envio_promedio_por_tienda['Costo de envío'])